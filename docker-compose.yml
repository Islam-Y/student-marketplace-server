version: '3.7'

services:
#  eureka-server:
#    build:
#      context: eureka-server
#      dockerfile: Dockerfile
#    restart: on-failure
#    ports:
#      - "8761:8761"
#    environment:
#      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
#    healthcheck:
#      test: curl --fail --silent localhost:8761/actuator/health | grep UP || exit 1
#      interval: 5s
#      retries: 20
#
#  cloud-config-server:
#    build:
#      context: cloud-config-server
#      dockerfile: Dockerfile
#    restart: on-failure
#    ports:
#      - "8888:8888"
#    environment:
#      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
#    depends_on:
#      eureka-server:
#        condition: service_healthy
#    healthcheck:
#      test: curl --fail --silent localhost:8888/actuator/health | grep UP || exit 1
#      interval: 5s
#      retries: 20
#
#  auth-service:
#    build:
#      context: auth-service
#      dockerfile: Dockerfile
##    restart: on-failure
#    ports:
#      - "8081:8081"
#    environment:
#      - spring.config.import=optional:configserver:http://cloud-config-server:8888
#      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
#    depends_on:
#      cloud-config-server:
#        condition: service_healthy
#
##  chat-service:
##    build:
##      context: chat-service
##      dockerfile: Dockerfile
###    restart: on-failure
##    ports:
##      - "8082:8082"
##    environment:
##      - spring.config.import=optional:configserver:http://cloud-config-server:8888
##      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
##      - SPRING_R2DBC_URL=r2dbc:postgresql://db:5432/studs
##      - SPRING_FLYWAY_URL=jdbc:postgresql://db:5432/studs
##      - kafka.bootstrap-servers=kafka:9092
##    depends_on:
##      cloud-config-server:
##        condition: service_healthy
##      db:
##        condition: service_started
#
#  gateway-service:
#    build:
#      context: gateway-service
#      dockerfile: Dockerfile
##    restart: on-failure
#    ports:
#      - "8083:8083"
#    environment:
#      - spring.config.import=optional:configserver:http://cloud-config-server:8888
#      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
#    depends_on:
#      cloud-config-server:
#        condition: service_healthy

#  item-service:
#    build:
#      context: item-service
#      dockerfile: Dockerfile
##    restart: on-failure
#    ports:
#      - "8084:8084"
#    environment:
#      - spring.config.import=optional:configserver:http://cloud-config-server:8888
#      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/studs
#      - kafka.bootstrap-servers=kafka:9092
#    depends_on:
#      cloud-config-server:
#        condition: service_healthy
#      db:
#        condition: service_started

#  user-service:
#    build:
#      context: user-service
#      dockerfile: Dockerfile
##    restart: on-failure
#    ports:
#      - "8085:8085"
#    environment:
#      - spring.config.import=optional:configserver:http://cloud-config-server:8888
#      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/studs
#      - kafka.bootstrap-servers=kafka:9092
#    depends_on:
#      cloud-config-server:
#        condition: service_healthy
#      db:
#        condition: service_started

#  object-service:
#    build:
#      context: object-service
#      dockerfile: Dockerfile
##    restart: on-failure
#    ports:
#      - "8086:8086"
#    environment:
#      - spring.config.import=optional:configserver:http://cloud-config-server:8888
#      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/studs
#      - SPRING_MINIO_URL=http://minio:9000
#    depends_on:
#      cloud-config-server:
#        condition: service_healthy
#      db:
#        condition: service_started

  db:
    image: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: studs
      POSTGRES_USER: fost
      POSTGRES_PASSWORD: fost

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_storage:/data
    environment:
      MINIO_ROOT_USER: "fost"
      MINIO_ROOT_PASSWORD: "fostfost"
    command: server --console-address ":9001" /data

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2183
      ZOOKEEPER_TICK_TIME: 2000
      ZOO_LOG4J_PROP: "DEBUG,CONSOLE"
    ports:
      - 2183:2183
    volumes:
      - zookeeper_data:/data
      - zookeeper_log:/datalog
#    healthcheck:
#      test: curl --fail --silent localhost:2182/actuator/health | grep UP || exit 1
#      interval: 5s
#      retries: 20

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
#        condition: service_healthy
    ports:
      - 29092:29092
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2183
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_MESSAGE_MAX_BYTES: 1048576
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_BYTES: -1
      KAFKA_MAX_REQUEST_SIZE: 1048576
      KAFKA_MAX_PARTITION_FETCH_BYTES: 1048576
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
    volumes:
      - kafka_data:/var/lib/kafka/data

volumes:
  minio_storage: {}
  zookeeper_data: {}
  zookeeper_log: {}
  kafka_data: {}